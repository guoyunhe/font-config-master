/*
 * Copyright (C) 2015 Guo Yunhe <guoyunhebrave@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package me.guoyunhe.fcm;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Guo Yunhe <guoyunhebrave@gmail.com>
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        initApplication();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        subpixelTestDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        schemePanel = new javax.swing.JPanel();
        schemeLabel = new javax.swing.JLabel();
        schemeComboBox = new javax.swing.JComboBox();
        newSchemeButton = new javax.swing.JButton();
        renameSchemeButton = new javax.swing.JButton();
        deleteSchemeButton = new javax.swing.JButton();
        schemePanelFillSpace = new javax.swing.JPanel();
        tabbedPanel = new javax.swing.JTabbedPane();
        fontFamilyPanel = new javax.swing.JScrollPane();
        fontTypeContentPanel = new javax.swing.JPanel();
        sansLabel = new javax.swing.JLabel();
        serifLabel = new javax.swing.JLabel();
        monoLabel = new javax.swing.JLabel();
        westLabel = new javax.swing.JLabel();
        sansComboBox = new javax.swing.JComboBox();
        serifComboBox = new javax.swing.JComboBox();
        monoComboBox = new javax.swing.JComboBox();
        zhLabel = new javax.swing.JLabel();
        zhSansComboBox = new javax.swing.JComboBox();
        zhSerifComboBox = new javax.swing.JComboBox();
        zhMonoComboBox = new javax.swing.JComboBox();
        jaLabel = new javax.swing.JLabel();
        koLabel = new javax.swing.JLabel();
        jaSansComboBox = new javax.swing.JComboBox();
        jaSerifComboBox = new javax.swing.JComboBox();
        jaMonoComboBox = new javax.swing.JComboBox();
        koSansComboBox = new javax.swing.JComboBox();
        koSerifComboBox = new javax.swing.JComboBox();
        koMonoComboBox = new javax.swing.JComboBox();
        fontRenderPanel = new javax.swing.JScrollPane();
        fontRenderContentPanel = new javax.swing.JPanel();
        antialiasLabel = new javax.swing.JLabel();
        antialiasCheckBox = new javax.swing.JCheckBox();
        hintingLabel = new javax.swing.JLabel();
        subpixelComboBox = new javax.swing.JComboBox();
        subpixelLabel = new javax.swing.JLabel();
        hintingCheckBox = new javax.swing.JCheckBox();
        hintStyleLabel = new javax.swing.JLabel();
        hintStyleComboBox = new javax.swing.JComboBox();
        subpixelTestButton = new javax.swing.JButton();
        fontAliasPanel = new javax.swing.JScrollPane();
        fontAliasContentPanel = new javax.swing.JPanel();
        aliasTableScrollPanel = new javax.swing.JScrollPane();
        aliasTable = new javax.swing.JTable();
        fontAliasActionPanel = new javax.swing.JPanel();
        originalFontLabel = new javax.swing.JLabel();
        originalFontTextField = new javax.swing.JTextField();
        fontAliasLabel = new javax.swing.JLabel();
        fontAliasComboBox = new javax.swing.JComboBox();
        newAliasButton = new javax.swing.JButton();
        deleteAliasButton = new javax.swing.JButton();
        aboutPanel = new javax.swing.JScrollPane();
        aboutContentPanel = new javax.swing.JPanel();
        aboutPanelFillSpaceTop = new javax.swing.JPanel();
        appTitlePanel = new javax.swing.JPanel();
        appNameLabel = new javax.swing.JLabel();
        appVersionLabel = new javax.swing.JLabel();
        appInfoPanel = new javax.swing.JPanel();
        freeSoftwareLabel = new javax.swing.JLabel();
        licenseLabel = new javax.swing.JLabel();
        authorLabel = new javax.swing.JLabel();
        homepageLabel = new javax.swing.JLabel();
        aboutPanelFillSpaceBottom = new javax.swing.JPanel();
        saveButtonPanel = new javax.swing.JPanel();
        oneClickButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        savePanelFillSpace = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation"); // NOI18N
        subpixelTestDialog.setTitle(bundle.getString("SUBPIXEL RENDER: TEST YOUR SCREEN")); // NOI18N
        subpixelTestDialog.setMinimumSize(new java.awt.Dimension(600, 450));
        subpixelTestDialog.setType(java.awt.Window.Type.UTILITY);
        subpixelTestDialog.getContentPane().setLayout(new javax.swing.BoxLayout(subpixelTestDialog.getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/me/guoyunhe/fcm/img/subpixel.png"))); // NOI18N
        subpixelTestDialog.getContentPane().add(jLabel1);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText(bundle.getString("PLEASE TAKE OFF YOUR GLASSES!")); // NOI18N
        subpixelTestDialog.getContentPane().add(jLabel2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(bundle.getString("FONT CONFIG MASTER")); // NOI18N
        setLocationByPlatform(true);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        schemePanel.setMaximumSize(new java.awt.Dimension(32767, 28));
        schemePanel.setLayout(new javax.swing.BoxLayout(schemePanel, javax.swing.BoxLayout.LINE_AXIS));

        schemeLabel.setText(bundle.getString("SCHEME")); // NOI18N
        schemePanel.add(schemeLabel);

        schemeComboBox.setMaximumSize(new java.awt.Dimension(200, 32767));
        schemeComboBox.setPreferredSize(new java.awt.Dimension(100, 26));
        schemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemeComboBoxActionPerformed(evt);
            }
        });
        schemePanel.add(schemeComboBox);

        newSchemeButton.setText(bundle.getString("NEW SCHEME")); // NOI18N
        newSchemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSchemeButtonActionPerformed(evt);
            }
        });
        schemePanel.add(newSchemeButton);

        renameSchemeButton.setText(bundle.getString("RENAME")); // NOI18N
        renameSchemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameSchemeButtonActionPerformed(evt);
            }
        });
        schemePanel.add(renameSchemeButton);

        deleteSchemeButton.setText(bundle.getString("DELETE")); // NOI18N
        deleteSchemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSchemeButtonActionPerformed(evt);
            }
        });
        schemePanel.add(deleteSchemeButton);
        schemePanel.add(schemePanelFillSpace);

        getContentPane().add(schemePanel);

        java.awt.GridBagLayout fontTypeContentPanelLayout = new java.awt.GridBagLayout();
        fontTypeContentPanelLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        fontTypeContentPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        fontTypeContentPanel.setLayout(fontTypeContentPanelLayout);

        sansLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sansLabel.setText(bundle.getString("SANS SERIF")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(sansLabel, gridBagConstraints);

        serifLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        serifLabel.setText(bundle.getString("SERIF")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(serifLabel, gridBagConstraints);

        monoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monoLabel.setText(bundle.getString("MONOSPACE")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(monoLabel, gridBagConstraints);

        westLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        westLabel.setText(bundle.getString("WESTERN FONTS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontTypeContentPanel.add(westLabel, gridBagConstraints);

        sansComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(sansComboBox, gridBagConstraints);

        serifComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(serifComboBox, gridBagConstraints);

        monoComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(monoComboBox, gridBagConstraints);

        zhLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        zhLabel.setText(bundle.getString("CHINESE FONTS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontTypeContentPanel.add(zhLabel, gridBagConstraints);

        zhSansComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(zhSansComboBox, gridBagConstraints);

        zhSerifComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(zhSerifComboBox, gridBagConstraints);

        zhMonoComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(zhMonoComboBox, gridBagConstraints);

        jaLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jaLabel.setText(bundle.getString("JAPANESE FONTS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontTypeContentPanel.add(jaLabel, gridBagConstraints);

        koLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        koLabel.setText(bundle.getString("KOREAN FONTS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontTypeContentPanel.add(koLabel, gridBagConstraints);

        jaSansComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(jaSansComboBox, gridBagConstraints);

        jaSerifComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(jaSerifComboBox, gridBagConstraints);

        jaMonoComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(jaMonoComboBox, gridBagConstraints);

        koSansComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(koSansComboBox, gridBagConstraints);

        koSerifComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(koSerifComboBox, gridBagConstraints);

        koMonoComboBox.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontTypeContentPanel.add(koMonoComboBox, gridBagConstraints);

        fontFamilyPanel.setViewportView(fontTypeContentPanel);

        tabbedPanel.addTab(bundle.getString("MainWindow.fontFamilyPanel.TabConstraints.tabTitle"), fontFamilyPanel); // NOI18N

        java.awt.GridBagLayout fontRenderContentPanelLayout = new java.awt.GridBagLayout();
        fontRenderContentPanelLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        fontRenderContentPanelLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        fontRenderContentPanel.setLayout(fontRenderContentPanelLayout);

        antialiasLabel.setText(bundle.getString("ANTIALIAS")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontRenderContentPanel.add(antialiasLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontRenderContentPanel.add(antialiasCheckBox, gridBagConstraints);

        hintingLabel.setText(bundle.getString("HINTING")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontRenderContentPanel.add(hintingLabel, gridBagConstraints);

        subpixelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { bundle.getString("NONE"), "RGB", "BGR", bundle.getString("VRGB"), bundle.getString("VBGR") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontRenderContentPanel.add(subpixelComboBox, gridBagConstraints);

        subpixelLabel.setText(bundle.getString("SUBPIXEL RENDER")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontRenderContentPanel.add(subpixelLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontRenderContentPanel.add(hintingCheckBox, gridBagConstraints);

        hintStyleLabel.setText(bundle.getString("HINT STYLE")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        fontRenderContentPanel.add(hintStyleLabel, gridBagConstraints);

        hintStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { bundle.getString("NONE"), bundle.getString("SLIGHT"), bundle.getString("MEDIUM"), bundle.getString("FULL") }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fontRenderContentPanel.add(hintStyleComboBox, gridBagConstraints);

        subpixelTestButton.setText(bundle.getString("TEST")); // NOI18N
        subpixelTestButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subpixelTestButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        fontRenderContentPanel.add(subpixelTestButton, gridBagConstraints);

        fontRenderPanel.setViewportView(fontRenderContentPanel);

        tabbedPanel.addTab(bundle.getString("MainWindow.fontRenderPanel.TabConstraints.tabTitle"), fontRenderPanel); // NOI18N

        fontAliasContentPanel.setLayout(new javax.swing.BoxLayout(fontAliasContentPanel, javax.swing.BoxLayout.Y_AXIS));

        aliasTableScrollPanel.setPreferredSize(new java.awt.Dimension(456, 250));

        aliasTable.setAutoCreateRowSorter(true);
        aliasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Original font", "Font alias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        aliasTableScrollPanel.setViewportView(aliasTable);
        if (aliasTable.getColumnModel().getColumnCount() > 0) {
            aliasTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("MainWindow.aliasTable.columnModel.title0")); // NOI18N
            aliasTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("MainWindow.aliasTable.columnModel.title1")); // NOI18N
        }

        fontAliasContentPanel.add(aliasTableScrollPanel);

        fontAliasActionPanel.setMaximumSize(new java.awt.Dimension(32767, 30));
        fontAliasActionPanel.setMinimumSize(new java.awt.Dimension(408, 30));
        fontAliasActionPanel.setPreferredSize(new java.awt.Dimension(100, 38));

        originalFontLabel.setText(bundle.getString("FONT")); // NOI18N
        fontAliasActionPanel.add(originalFontLabel);

        originalFontTextField.setAlignmentX(0.0F);
        originalFontTextField.setPreferredSize(new java.awt.Dimension(136, 28));
        fontAliasActionPanel.add(originalFontTextField);

        fontAliasLabel.setText(bundle.getString("ALIAS")); // NOI18N
        fontAliasActionPanel.add(fontAliasLabel);

        fontAliasComboBox.setEditable(true);
        fontAliasComboBox.setAlignmentX(0.0F);
        fontAliasComboBox.setPreferredSize(new java.awt.Dimension(136, 28));
        fontAliasActionPanel.add(fontAliasComboBox);

        newAliasButton.setText(bundle.getString("NEW")); // NOI18N
        newAliasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAliasButtonActionPerformed(evt);
            }
        });
        fontAliasActionPanel.add(newAliasButton);

        deleteAliasButton.setText(bundle.getString("DELETE")); // NOI18N
        deleteAliasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAliasButtonActionPerformed(evt);
            }
        });
        fontAliasActionPanel.add(deleteAliasButton);

        fontAliasContentPanel.add(fontAliasActionPanel);

        fontAliasPanel.setViewportView(fontAliasContentPanel);

        tabbedPanel.addTab(bundle.getString("MainWindow.fontAliasPanel.TabConstraints.tabTitle"), fontAliasPanel); // NOI18N

        aboutContentPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        aboutContentPanel.setPreferredSize(new java.awt.Dimension(300, 300));
        aboutContentPanel.setLayout(new javax.swing.BoxLayout(aboutContentPanel, javax.swing.BoxLayout.Y_AXIS));
        aboutContentPanel.add(aboutPanelFillSpaceTop);

        appTitlePanel.setMaximumSize(new java.awt.Dimension(32767, 50));

        appNameLabel.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        appNameLabel.setText(bundle.getString("FONT CONFIG MASTER")); // NOI18N
        appTitlePanel.add(appNameLabel);

        appVersionLabel.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        appVersionLabel.setText("0.3.0"); // NOI18N
        appTitlePanel.add(appVersionLabel);

        aboutContentPanel.add(appTitlePanel);

        appInfoPanel.setMaximumSize(new java.awt.Dimension(32767, 200));
        appInfoPanel.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        freeSoftwareLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        freeSoftwareLabel.setText(bundle.getString("FREE AND OPEN SOURCE SOFTWARE")); // NOI18N
        appInfoPanel.add(freeSoftwareLabel);

        licenseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        licenseLabel.setText(bundle.getString("GNU GPL VERSION 3 OR LATER")); // NOI18N
        appInfoPanel.add(licenseLabel);

        authorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        authorLabel.setText(bundle.getString("MainWindow.authorLabel.text")); // NOI18N
        appInfoPanel.add(authorLabel);

        homepageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homepageLabel.setText("<html><a href=\"#\">https://github.com/guoyunhe/font-config-master</a></html>"); // NOI18N
        homepageLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homepageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homepageLabelMouseClicked(evt);
            }
        });
        appInfoPanel.add(homepageLabel);

        aboutContentPanel.add(appInfoPanel);
        aboutContentPanel.add(aboutPanelFillSpaceBottom);

        aboutPanel.setViewportView(aboutContentPanel);

        tabbedPanel.addTab(bundle.getString("MainWindow.aboutPanel.TabConstraints.tabTitle"), aboutPanel); // NOI18N

        getContentPane().add(tabbedPanel);

        saveButtonPanel.setMaximumSize(new java.awt.Dimension(33075, 28));
        saveButtonPanel.setLayout(new javax.swing.BoxLayout(saveButtonPanel, javax.swing.BoxLayout.LINE_AXIS));

        oneClickButton.setText(bundle.getString("MainWindow.oneClickButton.text")); // NOI18N
        oneClickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneClickButtonActionPerformed(evt);
            }
        });
        saveButtonPanel.add(oneClickButton);

        resetButton.setText(bundle.getString("MainWindow.resetButton.text")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        saveButtonPanel.add(resetButton);
        saveButtonPanel.add(savePanelFillSpace);

        okButton.setText(bundle.getString("OK")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        saveButtonPanel.add(okButton);

        cancelButton.setText(bundle.getString("CANCEL")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        saveButtonPanel.add(cancelButton);

        getContentPane().add(saveButtonPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        saveConfig();
        fontconfig.writeConfig();
        String scheme = (String)schemeComboBox.getSelectedItem();
        fontconfig.writeConfig(schemeManager.getSchemeFile(scheme));
        schemeManager.setCurrentSchemeName(scheme);
        System.exit(0);
    }//GEN-LAST:event_okButtonActionPerformed

    private void subpixelTestButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subpixelTestButtonMouseClicked
        subpixelTestDialog.setVisible(true);
    }//GEN-LAST:event_subpixelTestButtonMouseClicked

    private void homepageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homepageLabelMouseClicked
        String link = "https://github.com/guoyunhe/font-config-master";
        try {
            Desktop.getDesktop().browse(new URI(link));
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_homepageLabelMouseClicked

    private void newAliasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAliasButtonActionPerformed
        String font = originalFontTextField.getText().trim();
        String alias = ((String)fontAliasComboBox.getSelectedItem()).trim();
        aliasTableModel.addRow(new String[]{font, alias});
    }//GEN-LAST:event_newAliasButtonActionPerformed

    private void deleteAliasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAliasButtonActionPerformed
        int[] selectedRowsOfView = this.aliasTable.getSelectedRows();
        int[] selectedRowsOfModel = new int[selectedRowsOfView.length];
        for (int i = 0; i < selectedRowsOfView.length; i++) {
            selectedRowsOfModel[i] = aliasTable.convertRowIndexToModel(selectedRowsOfView[i]);
        }
        Arrays.sort(selectedRowsOfModel);
        for (int i = selectedRowsOfModel.length - 1; i >= 0; i--) {
            aliasTableModel.removeRow(selectedRowsOfModel[i]);
        }
    }//GEN-LAST:event_deleteAliasButtonActionPerformed

    private void schemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemeComboBoxActionPerformed
        String scheme = (String)schemeComboBox.getSelectedItem();
        File schemeFile = schemeManager.getSchemeFile(scheme);
        if (schemeFile.exists()) {
            fontconfig.readConfig(schemeFile);
        } else {
            fontconfig.readConfig();
        }
        loadConfig();
    }//GEN-LAST:event_schemeComboBoxActionPerformed

    private void newSchemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSchemeButtonActionPerformed
        // Show dialog to create new scheme and save the configuration file
        String scheme = (String) JOptionPane.showInputDialog(
                this,
                java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("NAME OF NEW SCHEME"),
                java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("RENAME SCHEME"), // Title of dialog
                JOptionPane.PLAIN_MESSAGE);
        // If users clicked "Cancel" button of dialog, it will return null.
        if (scheme != null) {
            // Save new scheme file of current options
            saveConfig();
            File schemeFile = schemeManager.getSchemeFile(scheme);
            fontconfig.writeConfig(schemeFile);
            // Add and select new scheme item in ComboBox
            schemeComboBox.addItem(scheme);
            schemeComboBox.setSelectedItem(scheme);
        }
    }//GEN-LAST:event_newSchemeButtonActionPerformed

    private void renameSchemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameSchemeButtonActionPerformed
        int selectedIndex = schemeComboBox.getSelectedIndex();
        String oldName = (String)schemeComboBox.getSelectedItem();
        // Get input value from dialog
        String newName = (String) JOptionPane.showInputDialog(
                this,
                java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("NEW NAME OF SCHEME {0}"), new Object[] {oldName}),
                java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("CREATE NEW SCHEME"), // Title of dialog
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                oldName
        );
        // If users clicked "Cancel" button of dialog, it will return null.
        if (newName != null) {
            // Rename scheme file. Must be done before changing ComboBox, otherwise,
            // it will read file not exist in schemeComboBoxActionPerformed()
            schemeManager.renameScheme(oldName, newName);
            // Change ComboBox
            schemeComboBox.insertItemAt(newName, selectedIndex);
            schemeComboBox.removeItemAt(selectedIndex + 1);
            // This will tigger schemeComboBoxActionPerformed() function, and
            // load renamed scheme file
        }
    }//GEN-LAST:event_renameSchemeButtonActionPerformed

    private void deleteSchemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSchemeButtonActionPerformed
        // Delete scheme file
        String scheme = (String) schemeComboBox.getSelectedItem();
        schemeManager.deleteScheme(scheme);

        // Remove item in ComboBox
        schemeComboBox.removeItem(scheme);
        // This will trigger schemeComboBoxActionPerformed() function, and load
        // new scheme automatically

        // If deleted current scheme, set current scheme to new selected scheme
        if (schemeManager.getCurrentSchemeName().equals(scheme)) {
            String fallbackScheme = (String) schemeComboBox.getSelectedItem();
            schemeManager.setCurrentSchemeName(fallbackScheme);
        }
    }//GEN-LAST:event_deleteSchemeButtonActionPerformed

    private void oneClickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneClickButtonActionPerformed
        // Font family
        FontList fontlist = new FontList();
        sansComboBox.setSelectedItem("Nimbus Sans L");
        serifComboBox.setSelectedItem("Nimbus Roman No9 L");
        monoComboBox.setSelectedItem("DejaVu Sans Mono");
        zhSansComboBox.setSelectedItem("文泉驿微米黑");
        zhSerifComboBox.setSelectedItem("AR PL UMing CN");
        zhMonoComboBox.setSelectedItem("文泉驿微米黑");
        jaSansComboBox.setSelectedItem("文泉驿微米黑");
        jaSerifComboBox.setSelectedItem("AR PL UMing CN");
        jaMonoComboBox.setSelectedItem("文泉驿微米黑");
        koSansComboBox.setSelectedItem("文泉驿微米黑");
        koSerifComboBox.setSelectedItem("AR PL UMing CN");
        koMonoComboBox.setSelectedItem("文泉驿微米黑");
        // Render options
        antialiasCheckBox.setSelected(true);
        hintingCheckBox.setSelected(true);
        hintStyleComboBox.setSelectedIndex(FontConfigXML.HINT_FULL);
        subpixelComboBox.setSelectedIndex(FontConfigXML.RGBA_NONE);
        // Font alias
        while(aliasTableModel.getRowCount() > 0) {
            aliasTableModel.removeRow(0);
        }
        aliasTableModel.addRow(new String[]{"Helvetica", "Nimbus Sans L"});
        aliasTableModel.addRow(new String[]{"Helvetica Neue", "Nimbus Sans L"});
        aliasTableModel.addRow(new String[]{"Arial", "Nimbus Sans L"});
        aliasTableModel.addRow(new String[]{"Times New Roman", "Nimbus Roman No9 L"});
        aliasTableModel.addRow(new String[]{"SimSun", "AR PL UMing CN"});
        aliasTableModel.addRow(new String[]{"SimHei", "文泉驿微米黑"});
    }//GEN-LAST:event_oneClickButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // Clear all selection from views, except schemes ComboBox
        // Font family
        sansComboBox.setSelectedIndex(0);
        serifComboBox.setSelectedIndex(0);
        monoComboBox.setSelectedIndex(0);
        zhSansComboBox.setSelectedIndex(0);
        zhSerifComboBox.setSelectedIndex(0);
        zhMonoComboBox.setSelectedIndex(0);
        jaSansComboBox.setSelectedIndex(0);
        jaSerifComboBox.setSelectedIndex(0);
        jaMonoComboBox.setSelectedIndex(0);
        koSansComboBox.setSelectedIndex(0);
        koSerifComboBox.setSelectedIndex(0);
        koMonoComboBox.setSelectedIndex(0);
        // Render options
        antialiasCheckBox.setSelected(false);
        hintingCheckBox.setSelected(false);
        hintStyleComboBox.setSelectedIndex(0);
        subpixelComboBox.setSelectedIndex(0);
        // Font alias
        while(aliasTableModel.getRowCount() > 0) {
            aliasTableModel.removeRow(0);
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        MainWindow mw;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow mw = new MainWindow();
                mw.setVisible(true);
            }
        });

    }
    
    private void initApplication() {
        // Initialize objects
        fontconfig = new FontConfigXML();
        schemeManager = new SchemeManager();

        // Read data from fontconfig XML file
        fontconfig.readConfig();
        
        // Load system font list, fontconfig and application schemes to views
        loadFontList();
        loadScheme();
        // loadConfig() will be triggerd by loadScheme() because it trigger
        // schemeComboBoxActionPerformed() listener
    }

    private void loadFontList() {
        FontList fontlist = new FontList();
        String[] list = fontlist.get();
        sansComboBox.setModel(new DefaultComboBoxModel(list));
        serifComboBox.setModel(new DefaultComboBoxModel(list));
        monoComboBox.setModel(new DefaultComboBoxModel(list));
        zhSansComboBox.setModel(new DefaultComboBoxModel(list));
        zhSerifComboBox.setModel(new DefaultComboBoxModel(list));
        zhMonoComboBox.setModel(new DefaultComboBoxModel(list));
        jaSansComboBox.setModel(new DefaultComboBoxModel(list));
        jaSerifComboBox.setModel(new DefaultComboBoxModel(list));
        jaMonoComboBox.setModel(new DefaultComboBoxModel(list));
        koSansComboBox.setModel(new DefaultComboBoxModel(list));
        koSerifComboBox.setModel(new DefaultComboBoxModel(list));
        koMonoComboBox.setModel(new DefaultComboBoxModel(list));
        fontAliasComboBox.setModel(new DefaultComboBoxModel(list));
    }
    
    /**
     * Load fontconfig configuration file data to views.
     */
    private void loadConfig() {
        // Set UI components to configuration data
        sansComboBox.setSelectedItem(fontconfig.getSans());
        serifComboBox.setSelectedItem(fontconfig.getSerif());
        monoComboBox.setSelectedItem(fontconfig.getMono());
        zhSansComboBox.setSelectedItem(fontconfig.getZhSans());
        zhSerifComboBox.setSelectedItem(fontconfig.getZhSerif());
        zhMonoComboBox.setSelectedItem(fontconfig.getZhMono());
        jaSansComboBox.setSelectedItem(fontconfig.getJaSans());
        jaSerifComboBox.setSelectedItem(fontconfig.getJaSerif());
        jaMonoComboBox.setSelectedItem(fontconfig.getJaMono());
        koSansComboBox.setSelectedItem(fontconfig.getKoSans());
        koSerifComboBox.setSelectedItem(fontconfig.getKoSerif());
        koMonoComboBox.setSelectedItem(fontconfig.getKoMono());

        antialiasCheckBox.setSelected(fontconfig.getAntiAlias());
        hintingCheckBox.setSelected(fontconfig.getHinting());
        hintStyleComboBox.setSelectedIndex(fontconfig.getHintStyle());
        subpixelComboBox.setSelectedIndex(fontconfig.getSubpixel());
        
        aliasTableModel = new javax.swing.table.DefaultTableModel(
                new String[][]{}, // TODO: Read from fontconfig
                new String[]{
                    java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("ORIGINAL FONT"), java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("FONT ALIAS")
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        List<String[]> aliasList = fontconfig.getAliasList();
        aliasList.stream().forEach((alias) -> {
            aliasTableModel.addRow(alias);
        });
        aliasTable.setModel(aliasTableModel);
    }
    
    private void loadScheme() {
        // Load scheme list
        String[] schemeList = schemeManager.getSchemeList();
        if (schemeList == null) {
            schemeList = new String[]{java.util.ResourceBundle.getBundle("me/guoyunhe/fcm/i18n/translation").getString("DEFAULT")};
        }
        schemeComboBoxModel = new DefaultComboBoxModel(schemeList);
        schemeComboBox.setModel(schemeComboBoxModel);
        // Set current scheme
        String currentScheme = schemeManager.getCurrentSchemeName();
        if (currentScheme != null) {
            schemeComboBox.setSelectedItem(currentScheme);
        }
    }
    
    /**
     * Save options in views to fontconfig configuration and scheme.
     */
    private void saveConfig() {
        // TODO: write configuration from UI components
        fontconfig.setSans((String)sansComboBox.getSelectedItem());
        fontconfig.setSerif((String)serifComboBox.getSelectedItem());
        fontconfig.setMono((String)monoComboBox.getSelectedItem());
        fontconfig.setZhSans((String)zhSansComboBox.getSelectedItem());
        fontconfig.setZhSerif((String)zhSerifComboBox.getSelectedItem());
        fontconfig.setZhMono((String)zhMonoComboBox.getSelectedItem());
        fontconfig.setJaSans((String)jaSansComboBox.getSelectedItem());
        fontconfig.setJaSerif((String)jaSerifComboBox.getSelectedItem());
        fontconfig.setJaMono((String)jaMonoComboBox.getSelectedItem());
        fontconfig.setKoSans((String)koSansComboBox.getSelectedItem());
        fontconfig.setKoSerif((String)koSerifComboBox.getSelectedItem());
        fontconfig.setKoMono((String)koMonoComboBox.getSelectedItem());
        
        ArrayList<String[]> aliasList = new ArrayList();
        for(int i=0; i < this.aliasTableModel.getRowCount(); i++) {
            String font = (String)aliasTableModel.getValueAt(i, 0);
            String alias = (String)aliasTableModel.getValueAt(i, 1);
            aliasList.add(new String[]{font, alias});
        }
        fontconfig.setAliasList(aliasList);
        
        fontconfig.setAntiAlias(antialiasCheckBox.isSelected());
        fontconfig.setHinting(hintingCheckBox.isSelected());
        fontconfig.setHintStyle(hintStyleComboBox.getSelectedIndex());
        fontconfig.setSubpixel(subpixelComboBox.getSelectedIndex());
    }
    
    private FontConfigXML fontconfig;
    private DefaultTableModel aliasTableModel;
    private SchemeManager schemeManager;
    private DefaultComboBoxModel schemeComboBoxModel;
    private String currentScheme = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aboutContentPanel;
    private javax.swing.JScrollPane aboutPanel;
    private javax.swing.JPanel aboutPanelFillSpaceBottom;
    private javax.swing.JPanel aboutPanelFillSpaceTop;
    private javax.swing.JTable aliasTable;
    private javax.swing.JScrollPane aliasTableScrollPanel;
    private javax.swing.JCheckBox antialiasCheckBox;
    private javax.swing.JLabel antialiasLabel;
    private javax.swing.JPanel appInfoPanel;
    private javax.swing.JLabel appNameLabel;
    private javax.swing.JPanel appTitlePanel;
    private javax.swing.JLabel appVersionLabel;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteAliasButton;
    private javax.swing.JButton deleteSchemeButton;
    private javax.swing.JPanel fontAliasActionPanel;
    private javax.swing.JComboBox fontAliasComboBox;
    private javax.swing.JPanel fontAliasContentPanel;
    private javax.swing.JLabel fontAliasLabel;
    private javax.swing.JScrollPane fontAliasPanel;
    private javax.swing.JScrollPane fontFamilyPanel;
    private javax.swing.JPanel fontRenderContentPanel;
    private javax.swing.JScrollPane fontRenderPanel;
    private javax.swing.JPanel fontTypeContentPanel;
    private javax.swing.JLabel freeSoftwareLabel;
    private javax.swing.JComboBox hintStyleComboBox;
    private javax.swing.JLabel hintStyleLabel;
    private javax.swing.JCheckBox hintingCheckBox;
    private javax.swing.JLabel hintingLabel;
    private javax.swing.JLabel homepageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jaLabel;
    private javax.swing.JComboBox jaMonoComboBox;
    private javax.swing.JComboBox jaSansComboBox;
    private javax.swing.JComboBox jaSerifComboBox;
    private javax.swing.JLabel koLabel;
    private javax.swing.JComboBox koMonoComboBox;
    private javax.swing.JComboBox koSansComboBox;
    private javax.swing.JComboBox koSerifComboBox;
    private javax.swing.JLabel licenseLabel;
    private javax.swing.JComboBox monoComboBox;
    private javax.swing.JLabel monoLabel;
    private javax.swing.JButton newAliasButton;
    private javax.swing.JButton newSchemeButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton oneClickButton;
    private javax.swing.JLabel originalFontLabel;
    private javax.swing.JTextField originalFontTextField;
    private javax.swing.JButton renameSchemeButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox sansComboBox;
    private javax.swing.JLabel sansLabel;
    private javax.swing.JPanel saveButtonPanel;
    private javax.swing.JPanel savePanelFillSpace;
    private javax.swing.JComboBox schemeComboBox;
    private javax.swing.JLabel schemeLabel;
    private javax.swing.JPanel schemePanel;
    private javax.swing.JPanel schemePanelFillSpace;
    private javax.swing.JComboBox serifComboBox;
    private javax.swing.JLabel serifLabel;
    private javax.swing.JComboBox subpixelComboBox;
    private javax.swing.JLabel subpixelLabel;
    private javax.swing.JButton subpixelTestButton;
    private javax.swing.JDialog subpixelTestDialog;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JLabel westLabel;
    private javax.swing.JLabel zhLabel;
    private javax.swing.JComboBox zhMonoComboBox;
    private javax.swing.JComboBox zhSansComboBox;
    private javax.swing.JComboBox zhSerifComboBox;
    // End of variables declaration//GEN-END:variables
}
